import paramiko, io, os, ssl
from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError

def lambda_handler(event, context):
    key = os.environ['key']
    
    if (not os.environ.get('PYTHONHTTPSVERIFY', '') and
        getattr(ssl, '_create_unverified_context', None)):
        ssl._create_default_https_context = ssl._create_unverified_context    


    req = Request("https://demo.stratejm.com")
    try:
        response = urlopen(req)
    except:
        #print('key:', key)
        pseudofile = io.StringIO(key)
        private_key = paramiko.RSAKey.from_private_key(pseudofile)
        c = paramiko.SSHClient()
        c.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        event = {"IP":"172.31.10.179"}
        host = event["IP"]
        print("Connecting to " +host)
        c.connect( hostname = host, username = "ec2-user", pkey = private_key )
        print( "Connected to " +host )
        commands = [ "echo `date` ' tested by me' > supp1" ]
        for command in commands:
            try:
                stdin , stdout, stderr = c.exec_command(command)
                print(stdout.read())
                print(stderr.read())
            except paramiko.SSHException as err:
                print("Errors")
                print("EXCEPTION: %s" % err)
            finally:
                c.close()
